// Typography Config Variables
$font-sans: 'Montserrat', 'Helvetica Neue', Helvetica, Arial, sans-serif;
$font-serif: 'Droid Serif', Georgia, "Times New Roman", serif;
$font-mono: "Droid Sans Mono", Consolas, Monaco, Menlo, Consolas, monospace;

$base-vertical-unit: 6px !default; // The vertical grid unit. Margin, padding, and line-height are set to multiples of this value
$base-line-multi: 4 !default; // The value that multiplies the $base-vertical-unit to get the $base-line-height
$base-font-size: 16px !default; // Base font size in pixels
$base-em-font-size: ($base-font-size / 16px) * 1em; // Converts the $base-font-size value to EMs
$ms-ratio: 1.414 !default; // Modular scale ratio that is used to figure out all the different font sizes

$ms-down1: $base-em-font-size / $ms-ratio; // One step down in the modular scale in EMs
$ms-down2: $ms-down1 /$ms-ratio; // Two steps down in the modular scale in EMs
$ms-down3: $ms-down2 / $ms-ratio; // Three steps down in the modular scale in EMs
$ms-up1: $base-em-font-size * $ms-ratio; // One step up in the modular scale in EMs
$ms-up2: $ms-up1 * $ms-ratio; // Two steps up in the modular scale in EMs
$ms-up3: $ms-up2 * $ms-ratio; // Three steps up in the modular scale in EMs
$ms-up4: $ms-up3 * $ms-ratio; // Four steps up in the modular scale in EMs

// Do not modify these variables, they are used internally, use the config variables to adjust type settings.
$base-line-height: ($base-vertical-unit * $base-line-multi) / $base-font-size; // Creates a unitless line-height that is based on typographic ideals and maintains vertical rhythm

// Helper function(s)
@function stripUnits($number) {
  @return $number / ($number * 0 + 1);
}

// Typographic related functions
@function emCalc($target, $context: $base-font-size) {
  @return stripUnits(($target / $context)) + 0em;
}

@function emRhythm($font-size: $base-font-size, $lines: $base-vertical-unit) { // Creates a vertical rhythm EM value
  @return ($lines * stripUnits($base-vertical-unit)) / (stripUnits($font-size) * stripUnits($base-font-size)) + 0em;
}

@function unitlessRhythm($font-size: $base-font-size, $lines: $base-vertical-unit) { // Creates a unitless vertical rhythm value
  @return ($lines * stripUnits($base-vertical-unit)) / (stripUnits($font-size) * stripUnits($base-font-size));
}

// Typographic related mixins
@mixin setType($font-size: $base-em-font-size, $lines: $base-line-multi) { // Sets the type in EMs and makes a vertical rhythm unitless line-height that is based on context.
  font-size: $font-size;
  line-height: unitlessRhythm($font-size, $lines);
}

@mixin setLeading($font-size: $base-em-font-size, $lines: $base-line-multi) { // Creates a vertical rhythm unitless line-height that is based on context
  line-height: unitlessRhythm($font-size, $lines);
}

@mixin rhythmBorderTop($font-size: $base-em-font-size, $border-width: 1px, $lines: $base-line-multi) {
  border-top-width: $border-width;
  padding-top: (($lines * stripUnits($base-vertical-unit)) - stripUnits($border-width)) / (stripUnits($font-size) * stripUnits($base-font-size)) + 0em;;
}

@mixin rhythmBorderBottom($font-size: $base-em-font-size, $border-width: 1px, $lines: $base-line-multi) {
    border-bottom-width: $border-width;
    padding-bottom: (($lines * stripUnits($base-vertical-unit)) - stripUnits($border-width)) / (stripUnits($font-size) * stripUnits($base-font-size)) + 0em;;
}


// Typographic related base styles
html {
  font-size: ($base-font-size / 16px) * 100%;// Sets the font-size of the project as a percentage. Makes it easy to scale up/down the whole project for specific media queries
}

body {
  font-family: $font-serif;
  font-weight: 400;
  line-height: $base-line-height;
  color: $text-color;
}

h1, .h2, h2, .h2, h3, .h3, h4, .h4, h5, .h5, h6, .h6 {
  font-family: $font-sans;
  font-weight: bold;
  text-transform: uppercase;
}

// [1] Applies a margin bottom that is a multiple of the vertical grid in EMs. The first argument is the font size context and the second is multiple of the vertical grid unit.
// [2] Sets the type to one of the modular scale values and the second argument sets a unitless line-height as a multiple of the vertical grid.
// [3] A generic media query for tablet size ranges.
// [4] Applies a margin bottom that is the same vertical grid value as the mobile first rule.
// [5] Sets the type to one of the modular scale values and the second argument sets a unitless line-height as a multiple of the vertical grid.

h1, .h1 {
  margin-bottom: emRhythm($ms-up2, 4); // [1]
  @include setType($ms-up2, 6); // [2]

  @media (min-width: 43.75em) { // [3]
    margin-bottom: emRhythm($ms-up3, 4); // [4]
    @include setType($ms-up3, 8); // [5]
  }

  @media (min-width: 56.25em) {
    margin-bottom: emRhythm($ms-up4, 4);
    @include setType($ms-up4, 10);
  }
}

h2, .h2 {
  margin-bottom: emRhythm($ms-up1, 4);
  @include setType($ms-up1, 5);

  @media (min-width: 43.75em) {
    margin-bottom: emRhythm($ms-up2, 4);
    @include setType($ms-up2, 6)
  }

  @media (min-width: 56.25em) {
    margin-bottom: emRhythm($ms-up3, 4);
    @include setType($ms-up3, 8);
  }
}

h3, .h3 {
  margin-bottom: emRhythm($ms-up1, 4);
  @include setType($ms-up1, 5);

  @media (min-width: 56.25em) {
    margin-bottom: emRhythm($ms-up2, 4);
    @include setType($ms-up2, 6);
  }
}

h4, .h4 {
  margin-bottom: emRhythm($ms-up1, 4);
  @include setType($ms-up1, 5);
}

h5, .h5 {
  margin-bottom: emRhythm($base-em-font-size, 4);
  @include setType($base-em-font-size, 4);
}

h6, .h6 {
  @extend h5;
}

p {
  -webkit-hyphens: auto;
  -moz-hyphens: auto;
  -ms-hyphens: auto;
  -o-hyphens: auto;
  hyphens: auto;
  word-wrap: break-word;
  max-width: 36em;
  margin-bottom: emRhythm($base-em-font-size, 4);

  @media (min-width: 43.75em) {
    text-align: justify;
  }
}

p + p {
  margin-top: emRhythm(-4);
  text-indent: emRhythm(4);
}

small, .font-small {
  @include setType(13px, 3);
}

em {
  font-style: italic;
}

strong {
  font-weight: bold;
}

blockquote {
  font-family: $font-mono;
  font-weight: bold;
  margin-top: emRhythm($base-em-font-size, 4);
  margin-bottom: emRhythm($base-em-font-size, 4);
  padding-left: emRhythm($base-em-font-size, 4);
  margin-left: emRhythm($base-em-font-size, -5);
  border-left: $base-vertical-unit solid lighten(#000, 50%);

  footer {
    cite {
      &:before {
        content: " â€“ ";
      }
    }
  }
}

pre, code {
  font-family: $font-mono;
}

time, .time {
  text-transform: uppercase;
}

ul {
  list-style: disc;

  ul {
    margin-bottom: 0;
  }
}

ol {

  ol {
    margin-bottom: 0;
  }
}

ol {
  list-style: decimal;
}

ol, ul {
  margin-bottom: emRhythm($base-em-font-size, 4);
  margin-left: emRhythm($base-em-font-size, 4);
}

abbr {
  font-variant: small-caps; /* https://developer.mozilla.org/en-US/docs/CSS/font-variant */
  font-weight: 600;
  text-transform: lowercase;
}

abbr[title]:hover {
  cursor: help; /* cursor changed to a question mark when it has a title */
}